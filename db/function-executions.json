[
  {
    "createdAt": 1669477228225,
    "updatedAt": 1669477228225,
    "deletedAt": 0,
    "createdFirstAt": 1669477228225,
    "functionName": "getTodoPages",
    "tsFunctionId": "hyglaenoisdtcdhanrqclrpr",
    "inputParameters": [
      {}
    ],
    "isExample": false,
    "isTest": false,
    "isResultFromCache": false,
    "output": {
      "flat": [
        {
          "queryPath": "stats",
          "menuTitle": "Statistics",
          "menuTitleTooltip": "Some stats about cool stuff"
        },
        {
          "queryPath": "SelfSprintReview",
          "menuTitle": "Sprint review",
          "menuTitleTooltip": "Let's do this every friday, 3PM CET"
        },
        {
          "queryPath": "TodoOffer",
          "isMenuHidden": true
        },
        {
          "queryPath": "upsert/TodoOffer",
          "isMenuHidden": true
        },
        {
          "queryPath": "upsert/SelfSprintReview",
          "isMenuHidden": true
        },
        {
          "pageData": {
            "projectRelativeFilePath": "packages/todo/my-first-codestory.codestory.md"
          },
          "queryPath": "packages/my-first-codestory.codestory",
          "menuTitle": "",
          "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
          "isMenuHidden": false
        },
        {
          "pageData": {
            "projectRelativeFilePath": "packages/todo/my-first-codestory.md"
          },
          "queryPath": "packages/my-first-codestory",
          "menuTitle": "My first codestory",
          "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
          "isMenuHidden": false
        }
      ],
      "nested": [
        {
          "queryPath": "stats",
          "menuTitle": "Statistics",
          "menuTitleTooltip": "Some stats about cool stuff",
          "pageData": null,
          "__chunk": "stats"
        },
        {
          "queryPath": "SelfSprintReview",
          "menuTitle": "Sprint review",
          "menuTitleTooltip": "Let's do this every friday, 3PM CET",
          "pageData": null,
          "__chunk": "SelfSprintReview"
        },
        {
          "queryPath": "TodoOffer",
          "isMenuHidden": true,
          "pageData": null,
          "__chunk": "TodoOffer"
        },
        {
          "stats": {
            "queryPath": "stats",
            "menuTitle": "Statistics",
            "menuTitleTooltip": "Some stats about cool stuff",
            "pageData": null,
            "__check": true,
            "__chunk": "stats"
          },
          "SelfSprintReview": {
            "queryPath": "SelfSprintReview",
            "menuTitle": "Sprint review",
            "menuTitleTooltip": "Let's do this every friday, 3PM CET",
            "pageData": null,
            "__check": true,
            "__chunk": "SelfSprintReview"
          },
          "TodoOffer": {
            "queryPath": "TodoOffer",
            "isMenuHidden": true,
            "pageData": null,
            "__check": true,
            "__chunk": "TodoOffer"
          },
          "upsert": {
            "TodoOffer": {
              "queryPath": "upsert/TodoOffer",
              "isMenuHidden": true,
              "pageData": null,
              "__check": true,
              "__chunk": "TodoOffer"
            },
            "SelfSprintReview": {
              "queryPath": "upsert/SelfSprintReview",
              "isMenuHidden": true,
              "pageData": null,
              "__check": true,
              "__chunk": "SelfSprintReview"
            }
          },
          "packages": {
            "my-first-codestory.codestory": {
              "pageData": null,
              "queryPath": "packages/my-first-codestory.codestory",
              "menuTitle": "",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__check": true,
              "__chunk": "my-first-codestory.codestory"
            },
            "my-first-codestory": {
              "pageData": null,
              "queryPath": "packages/my-first-codestory",
              "menuTitle": "My first codestory",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__check": true,
              "__chunk": "my-first-codestory"
            }
          },
          "pageData": null,
          "queryPath": "upsert",
          "children": [
            {
              "queryPath": "upsert/TodoOffer",
              "isMenuHidden": true,
              "pageData": null,
              "__chunk": "TodoOffer"
            },
            {
              "queryPath": "upsert/SelfSprintReview",
              "isMenuHidden": true,
              "pageData": null,
              "__chunk": "SelfSprintReview"
            }
          ]
        },
        {
          "stats": {
            "queryPath": "stats",
            "menuTitle": "Statistics",
            "menuTitleTooltip": "Some stats about cool stuff",
            "pageData": null,
            "__check": true,
            "__chunk": "stats"
          },
          "SelfSprintReview": {
            "queryPath": "SelfSprintReview",
            "menuTitle": "Sprint review",
            "menuTitleTooltip": "Let's do this every friday, 3PM CET",
            "pageData": null,
            "__check": true,
            "__chunk": "SelfSprintReview"
          },
          "TodoOffer": {
            "queryPath": "TodoOffer",
            "isMenuHidden": true,
            "pageData": null,
            "__check": true,
            "__chunk": "TodoOffer"
          },
          "upsert": {
            "TodoOffer": {
              "queryPath": "upsert/TodoOffer",
              "isMenuHidden": true,
              "pageData": null,
              "__check": true,
              "__chunk": "TodoOffer"
            },
            "SelfSprintReview": {
              "queryPath": "upsert/SelfSprintReview",
              "isMenuHidden": true,
              "pageData": null,
              "__check": true,
              "__chunk": "SelfSprintReview"
            }
          },
          "packages": {
            "my-first-codestory.codestory": {
              "pageData": null,
              "queryPath": "packages/my-first-codestory.codestory",
              "menuTitle": "",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__check": true,
              "__chunk": "my-first-codestory.codestory"
            },
            "my-first-codestory": {
              "pageData": null,
              "queryPath": "packages/my-first-codestory",
              "menuTitle": "My first codestory",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__check": true,
              "__chunk": "my-first-codestory"
            }
          },
          "pageData": null,
          "queryPath": "packages",
          "children": [
            {
              "pageData": null,
              "queryPath": "packages/my-first-codestory.codestory",
              "menuTitle": "",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__chunk": "my-first-codestory.codestory"
            },
            {
              "pageData": null,
              "queryPath": "packages/my-first-codestory",
              "menuTitle": "My first codestory",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__chunk": "my-first-codestory"
            }
          ]
        }
      ]
    },
    "performance": [
      {
        "label": "upsertDevice",
        "durationMs": 7
      },
      {
        "label": "getTsFunction",
        "durationMs": 5
      },
      {
        "label": "auth",
        "durationMs": 0
      },
      {
        "label": "cacheLookup",
        "durationMs": 0
      },
      {
        "label": "inputValidation",
        "durationMs": 0
      },
      {
        "label": "function",
        "durationMs": 11
      }
    ],
    "id": "pndmvsciefkoxehowixtqmgr"
  },
  {
    "createdAt": 1669477228329,
    "updatedAt": 1669477228329,
    "deletedAt": 0,
    "createdFirstAt": 1669477228329,
    "functionName": "getFileContents",
    "tsFunctionId": "jxairibucrhdsbdaqmhvmiyz",
    "inputParameters": [
      "packages/todo/my-first-codestory.md"
    ],
    "isExample": false,
    "isTest": false,
    "isResultFromCache": false,
    "output": {
      "fileContents": "---\npriority: low\nisCodestory: true\nheaderImage: ![](./abstract-3840x2160-colorful-lines-4k-20643.jpg)\nprivacy: public\nlanguage: english\n---\n\nHello, I'm Bruna :)\n",
      "isSuccessful": true
    },
    "performance": [
      {
        "label": "upsertDevice",
        "durationMs": 2
      },
      {
        "label": "getTsFunction",
        "durationMs": 1
      },
      {
        "label": "auth",
        "durationMs": 0
      },
      {
        "label": "cacheLookup",
        "durationMs": 0
      },
      {
        "label": "inputValidation",
        "durationMs": 0
      },
      {
        "label": "function",
        "durationMs": 1
      }
    ],
    "id": "ldrvgttoaacmwzvrwmymggxm"
  },
  {
    "createdAt": 1669477228346,
    "updatedAt": 1669477228346,
    "deletedAt": 0,
    "createdFirstAt": 1669477228346,
    "functionName": "getTodoPages",
    "tsFunctionId": "hyglaenoisdtcdhanrqclrpr",
    "inputParameters": [
      {}
    ],
    "isExample": false,
    "isTest": false,
    "isResultFromCache": false,
    "output": {
      "flat": [
        {
          "queryPath": "stats",
          "menuTitle": "Statistics",
          "menuTitleTooltip": "Some stats about cool stuff"
        },
        {
          "queryPath": "SelfSprintReview",
          "menuTitle": "Sprint review",
          "menuTitleTooltip": "Let's do this every friday, 3PM CET"
        },
        {
          "queryPath": "TodoOffer",
          "isMenuHidden": true
        },
        {
          "queryPath": "upsert/TodoOffer",
          "isMenuHidden": true
        },
        {
          "queryPath": "upsert/SelfSprintReview",
          "isMenuHidden": true
        },
        {
          "pageData": {
            "projectRelativeFilePath": "packages/todo/my-first-codestory.codestory.md"
          },
          "queryPath": "packages/my-first-codestory.codestory",
          "menuTitle": "",
          "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
          "isMenuHidden": false
        },
        {
          "pageData": {
            "projectRelativeFilePath": "packages/todo/my-first-codestory.md"
          },
          "queryPath": "packages/my-first-codestory",
          "menuTitle": "My first codestory",
          "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
          "isMenuHidden": false
        }
      ],
      "nested": [
        {
          "queryPath": "stats",
          "menuTitle": "Statistics",
          "menuTitleTooltip": "Some stats about cool stuff",
          "pageData": null,
          "__chunk": "stats"
        },
        {
          "queryPath": "SelfSprintReview",
          "menuTitle": "Sprint review",
          "menuTitleTooltip": "Let's do this every friday, 3PM CET",
          "pageData": null,
          "__chunk": "SelfSprintReview"
        },
        {
          "queryPath": "TodoOffer",
          "isMenuHidden": true,
          "pageData": null,
          "__chunk": "TodoOffer"
        },
        {
          "stats": {
            "queryPath": "stats",
            "menuTitle": "Statistics",
            "menuTitleTooltip": "Some stats about cool stuff",
            "pageData": null,
            "__check": true,
            "__chunk": "stats"
          },
          "SelfSprintReview": {
            "queryPath": "SelfSprintReview",
            "menuTitle": "Sprint review",
            "menuTitleTooltip": "Let's do this every friday, 3PM CET",
            "pageData": null,
            "__check": true,
            "__chunk": "SelfSprintReview"
          },
          "TodoOffer": {
            "queryPath": "TodoOffer",
            "isMenuHidden": true,
            "pageData": null,
            "__check": true,
            "__chunk": "TodoOffer"
          },
          "upsert": {
            "TodoOffer": {
              "queryPath": "upsert/TodoOffer",
              "isMenuHidden": true,
              "pageData": null,
              "__check": true,
              "__chunk": "TodoOffer"
            },
            "SelfSprintReview": {
              "queryPath": "upsert/SelfSprintReview",
              "isMenuHidden": true,
              "pageData": null,
              "__check": true,
              "__chunk": "SelfSprintReview"
            }
          },
          "packages": {
            "my-first-codestory.codestory": {
              "pageData": null,
              "queryPath": "packages/my-first-codestory.codestory",
              "menuTitle": "",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__check": true,
              "__chunk": "my-first-codestory.codestory"
            },
            "my-first-codestory": {
              "pageData": null,
              "queryPath": "packages/my-first-codestory",
              "menuTitle": "My first codestory",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__check": true,
              "__chunk": "my-first-codestory"
            }
          },
          "pageData": null,
          "queryPath": "upsert",
          "children": [
            {
              "queryPath": "upsert/TodoOffer",
              "isMenuHidden": true,
              "pageData": null,
              "__chunk": "TodoOffer"
            },
            {
              "queryPath": "upsert/SelfSprintReview",
              "isMenuHidden": true,
              "pageData": null,
              "__chunk": "SelfSprintReview"
            }
          ]
        },
        {
          "stats": {
            "queryPath": "stats",
            "menuTitle": "Statistics",
            "menuTitleTooltip": "Some stats about cool stuff",
            "pageData": null,
            "__check": true,
            "__chunk": "stats"
          },
          "SelfSprintReview": {
            "queryPath": "SelfSprintReview",
            "menuTitle": "Sprint review",
            "menuTitleTooltip": "Let's do this every friday, 3PM CET",
            "pageData": null,
            "__check": true,
            "__chunk": "SelfSprintReview"
          },
          "TodoOffer": {
            "queryPath": "TodoOffer",
            "isMenuHidden": true,
            "pageData": null,
            "__check": true,
            "__chunk": "TodoOffer"
          },
          "upsert": {
            "TodoOffer": {
              "queryPath": "upsert/TodoOffer",
              "isMenuHidden": true,
              "pageData": null,
              "__check": true,
              "__chunk": "TodoOffer"
            },
            "SelfSprintReview": {
              "queryPath": "upsert/SelfSprintReview",
              "isMenuHidden": true,
              "pageData": null,
              "__check": true,
              "__chunk": "SelfSprintReview"
            }
          },
          "packages": {
            "my-first-codestory.codestory": {
              "pageData": null,
              "queryPath": "packages/my-first-codestory.codestory",
              "menuTitle": "",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__check": true,
              "__chunk": "my-first-codestory.codestory"
            },
            "my-first-codestory": {
              "pageData": null,
              "queryPath": "packages/my-first-codestory",
              "menuTitle": "My first codestory",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__check": true,
              "__chunk": "my-first-codestory"
            }
          },
          "pageData": null,
          "queryPath": "packages",
          "children": [
            {
              "pageData": null,
              "queryPath": "packages/my-first-codestory.codestory",
              "menuTitle": "",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__chunk": "my-first-codestory.codestory"
            },
            {
              "pageData": null,
              "queryPath": "packages/my-first-codestory",
              "menuTitle": "My first codestory",
              "menuTitleTooltip": "Tooltip example\n\nShould render markdown\n\n**Say,this is great, no?**",
              "isMenuHidden": false,
              "__chunk": "my-first-codestory"
            }
          ]
        }
      ]
    },
    "performance": [
      {
        "label": "upsertDevice",
        "durationMs": 1
      },
      {
        "label": "getTsFunction",
        "durationMs": 1
      },
      {
        "label": "auth",
        "durationMs": 0
      },
      {
        "label": "cacheLookup",
        "durationMs": 0
      },
      {
        "label": "inputValidation",
        "durationMs": 0
      },
      {
        "label": "function",
        "durationMs": 5
      }
    ],
    "id": "jirqojuztrfngnarupfpuziu"
  },
  {
    "createdAt": 1669477229313,
    "updatedAt": 1669477229313,
    "deletedAt": 0,
    "createdFirstAt": 1669477229313,
    "functionName": "getFrontmatterSchema",
    "tsFunctionId": "czsmmxbzrtthzsdqxhfodlai",
    "inputParameters": [
      "TodoFile"
    ],
    "isExample": false,
    "isTest": false,
    "isResultFromCache": false,
    "output": {
      "fullComment": "Any markdown file in the todo folder should become this model",
      "properties": [
        {
          "name": "priority",
          "required": false,
          "schema": {
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "fullComment": "",
            "type": "string"
          }
        },
        {
          "name": "isHiddenForFreelancer",
          "required": false,
          "schema": {
            "fullComment": "overwrites visibility for freelancer\n\nby default a todo is visible, unless specifically hiding it\n\nby default a todo with `isDraft: true` is hidden, unless specifically making it visible",
            "type": "boolean"
          }
        },
        {
          "name": "isClaimable",
          "required": false,
          "schema": {
            "fullComment": "make todo claimable by a freelancer",
            "type": "boolean"
          }
        },
        {
          "name": "doNowPrice",
          "required": false,
          "schema": {
            "fullComment": "Price to be paid, that, if offered by a freelancer, will be accepted.\n\nTLDR;EUROS\n\nA price is a number indicating the relative cost. Absolute cost is calculated by many other factors\n\nFor now, we're going to keep it simple: 1 `Price` is equal to 1 Eurocent.\n\nLater we can add all kinds of extra conversion:\n\n- currency support\n- king os currency\n- lower cost for poorer people\n\netc...\n\nFirst we need to start making sales before we can add such complexity.\n\n",
            "type": "number"
          }
        },
        {
          "name": "deadlineAt",
          "required": false,
          "schema": {
            "fullComment": "admin can specify when this needs to be finished",
            "type": "number"
          }
        },
        {
          "name": "codeRequired_operationSlugs",
          "required": true,
          "schema": {
            "fullComment": "Source needed from these operations, can be made accessible after accepting the offer",
            "items": [
              {
                "schema": {
                  "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                  "type": "string"
                },
                "name": "Id"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "todoOffersCalculated",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "Freelancers can offer their services for a todofile",
                  "properties": [
                    {
                      "name": "createdAt",
                      "required": true,
                      "schema": {
                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "updatedAt",
                      "required": true,
                      "schema": {
                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "deletedAt",
                      "required": true,
                      "schema": {
                        "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "createdFirstAt",
                      "required": true,
                      "schema": {
                        "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
                        "type": "number"
                      }
                    },
                    {
                      "name": "operationName",
                      "required": true,
                      "schema": {
                        "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "null"
                      }
                    },
                    {
                      "name": "projectRelativePath",
                      "required": true,
                      "schema": {
                        "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "operationRelativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
                        "type": "string"
                      }
                    },
                    {
                      "name": "id",
                      "required": true,
                      "schema": {
                        "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "categoryStackCalculated",
                      "required": false,
                      "schema": {
                        "fullComment": "In case of jsonSingle storageMethod, the categoryStack is generated by the location of the file in the db model folder in the db folder.\n\nNB: Changing this value when updating/upserting, changes where the item is located!\n\nTaken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
                        "nb": "Changing this value when updating/upserting, changes where the item is located!",
                        "items": [
                          {
                            "schema": {
                              "type": "string"
                            },
                            "name": null
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "offerPrice",
                      "required": true,
                      "schema": {
                        "fullComment": "price the freelancer offers to do this todo\n\nNB: once offer is accepted, freelancer nor admin can edit the `offerPrice`\n\nTLDR;EUROS\n\nA price is a number indicating the relative cost. Absolute cost is calculated by many other factors\n\nFor now, we're going to keep it simple: 1 `Price` is equal to 1 Eurocent.\n\nLater we can add all kinds of extra conversion:\n\n- currency support\n- king os currency\n- lower cost for poorer people\n\netc...\n\nFirst we need to start making sales before we can add such complexity.\n\n",
                        "nb": "once offer is accepted, freelancer nor admin can edit the `offerPrice`",
                        "type": "number"
                      }
                    },
                    {
                      "name": "personId",
                      "required": true,
                      "schema": {
                        "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "todoFileId",
                      "required": true,
                      "schema": {
                        "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "isPaid",
                      "required": false,
                      "schema": {
                        "fullComment": "mark offer as paid",
                        "type": "boolean"
                      }
                    },
                    {
                      "name": "status",
                      "required": true,
                      "schema": {
                        "enum": [
                          "offered",
                          "rejected",
                          "accepted",
                          "todo",
                          "doing",
                          "done",
                          "approved"
                        ],
                        "fullComment": "Status of an offer to do some todolist\n\n- `offered`: offer placed, has not been accepted yet. freelancer can still edit offer or remove it\n- `rejected`: offer can be rejected by admin (before accepting)\n- `canceled`: freelancer and admin can cancel an previously accepted offer\n- `accepted`: offer is accepted by admin\n- `todo`: freelancer has said it still needs to be done\n- `doing` freelancer has said it's in progress\n- `done` freelancer said it's done\n- `approved` approved by admin, offer should become archived",
                        "type": "string"
                      }
                    },
                    {
                      "name": "assets",
                      "required": true,
                      "schema": {
                        "fullComment": "Any assets that are related to this offer can be placed and removed both by freelancer and admin",
                        "items": [
                          {
                            "schema": {
                              "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                              "properties": [
                                {
                                  "name": "alt",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nAlt text for the asset",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "relativePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "name",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "temporaryDestination",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "projectRelativeReferencingFilePath",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                                    "type": "string"
                                  }
                                },
                                {
                                  "name": "modelName",
                                  "required": false,
                                  "schema": {
                                    "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                                    "type": "string"
                                  }
                                }
                              ],
                              "type": "object"
                            },
                            "name": "BackendAsset"
                          }
                        ],
                        "type": "array"
                      }
                    },
                    {
                      "name": "offeredTodoFileMarkdown",
                      "required": true,
                      "schema": {
                        "fullComment": "markdown of the `TodoFile` when the offer was placed or offerPrice edited\n\nafter offer was accepted, should not be edited\n\na string that is known to contain markdown.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "editableTodoFileMarkdown",
                      "required": true,
                      "schema": {
                        "fullComment": "freelancer and admin can both edit the `offeredMarkdown` freely after accepting\n\nsince there's also still a link to the `TodoFile`, admin can also opt to edit that one because it may be applied to all offers. freelancer can't edit the original todo.\n\na string that is known to contain markdown.",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "TodoOffer"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "owner_personId",
          "required": false,
          "schema": {
            "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
            "type": "string"
          }
        },
        {
          "name": "categoryStackCalculated",
          "required": true,
          "schema": {
            "fullComment": "Taken from the location in the folder of the db-model.\n\nNB: Changing this value when updating/upserting, changes where the item is located!",
            "nb": "Changing this value when updating/upserting, changes where the item is located!",
            "items": [
              {
                "schema": {
                  "type": "string"
                },
                "name": null
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "isPreset",
          "required": false,
          "schema": {
            "fullComment": "A way to store messagepresets in markdown. the headers are the different categories. If the first alinea is bolded, it will be parsed to be the title, and will be removed from the message.",
            "type": "boolean"
          }
        },
        {
          "name": "isPostable",
          "required": false,
          "schema": {
            "fullComment": "if `.isPlanned` is set to true, this will be converted into `MediaPost`",
            "type": "boolean"
          }
        },
        {
          "name": "isCodestory",
          "required": false,
          "schema": {
            "fullComment": "If true, this thing should be parsed into a codestory, after which the `.isPostable: true` will be added.",
            "type": "boolean"
          }
        },
        {
          "name": "tsInterfaceIds",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                  "type": "string"
                },
                "name": "Id"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "tsFunctionIds",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                  "type": "string"
                },
                "name": "Id"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "bundleConfigSlugs",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "operationIds",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                  "type": "string"
                },
                "name": "Id"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "reference_assets",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
                  "properties": [
                    {
                      "name": "alt",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nAlt text for the asset",
                        "type": "string"
                      }
                    },
                    {
                      "name": "relativePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "name",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                        "type": "string"
                      }
                    },
                    {
                      "name": "temporaryDestination",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                        "type": "string"
                      }
                    },
                    {
                      "name": "projectRelativeReferencingFilePath",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                        "type": "string"
                      }
                    },
                    {
                      "name": "modelName",
                      "required": false,
                      "schema": {
                        "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                        "type": "string"
                      }
                    }
                  ],
                  "type": "object"
                },
                "name": "BackendAsset"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "headerImage",
          "required": false,
          "schema": {
            "fullComment": "Part of the asset that should be sent to the backend. The rest should frontend-only\n\nSome values are stored, some are not",
            "properties": [
              {
                "name": "alt",
                "required": false,
                "schema": {
                  "fullComment": "Stored value\n\nAlt text for the asset",
                  "type": "string"
                }
              },
              {
                "name": "relativePath",
                "required": false,
                "schema": {
                  "fullComment": "Stored value\n\nRelative path, relative to the location the asset is defined in.\n\nOnly available if the asset was already processed by a backend. Before backend processing, only `temporaryDestination` is available.\n\nChanging the `relativePath` shouldn't do anything, it can only be changed by backend processing by giving a new `temporaryDestination`, or by changing the `name`.",
                  "type": "string"
                }
              },
              {
                "name": "name",
                "required": false,
                "schema": {
                  "fullComment": "Not stored\n\nNot given by the backend data, but can be SENT to the backend.\n\nShould not be stored, but if you change this value and send it to the backend, it should rename the file and thus the relativePath stored should change.\n\nNB: I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                  "nb": "I'm not sure how to solve having multiple references to a single file. If this occurs, which is hard to prevent if allowing manual editing of data, it may be hard to prevent dead links if someone changes the name of a file that is also refered to in other places. In this case, it would be ideal if all references also would be renamed, but it may be hard to find them. Even if we solve this, it's still possible to get dead links if someone renames the file (or removes it) manually. This should be taken into account, and may not break anything!",
                  "type": "string"
                }
              },
              {
                "name": "temporaryDestination",
                "required": false,
                "schema": {
                  "fullComment": "Not stored\n\nFilename after uploading in the temporary folder. should still be moved to its final location\n\nOnly available straight after uploading. After the function processes the asset, this is removed and a `relativePath` is created.",
                  "type": "string"
                }
              },
              {
                "name": "projectRelativeReferencingFilePath",
                "required": false,
                "schema": {
                  "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nLocation of the place where the asset is referenced\n\n- markdown file (or folder where it is located)\n- typescript file (or folder where it is located)\n- database file (or folder where it is located)",
                  "type": "string"
                }
              },
              {
                "name": "modelName",
                "required": false,
                "schema": {
                  "fullComment": "Not stored\n\nNeeds to be there before calling `processAsset`. Should be augmented to the backendAsset in the frontend, before sending it to the backend.\n\nModel that the asset is related to",
                  "type": "string"
                }
              }
            ],
            "type": "object"
          }
        },
        {
          "name": "headerTitle",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "headerBig",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "headerSubTitle",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "header_markdownCallToActionSlugs",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "markdownCallToActionSlugs",
          "required": false,
          "schema": {
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "shop_itemIds",
          "required": false,
          "schema": {
            "fullComment": "Refers to an `Item` from the shop",
            "items": [
              {
                "schema": {
                  "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
                  "type": "string"
                },
                "name": "Id"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "author_personSlugs",
          "required": false,
          "schema": {
            "fullComment": "Author, reference to persons",
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "interestSlugs",
          "required": false,
          "schema": {
            "fullComment": "Labels referring to interests",
            "items": [
              {
                "schema": {
                  "fullComment": "use this for any identifier that's not an Id-type. Usually this is a kebab-case version of a written text, but it can also be a file path, for example.",
                  "type": "string"
                },
                "name": "Slug"
              }
            ],
            "type": "array"
          }
        },
        {
          "name": "price",
          "required": false,
          "schema": {
            "fullComment": "Price for this file\n\nNB: in case the file is a README file, the price applies to all files in this folder, recursively, PER FILE.\n\nTLDR;EUROS\n\nA price is a number indicating the relative cost. Absolute cost is calculated by many other factors\n\nFor now, we're going to keep it simple: 1 `Price` is equal to 1 Eurocent.\n\nLater we can add all kinds of extra conversion:\n\n- currency support\n- king os currency\n- lower cost for poorer people\n\netc...\n\nFirst we need to start making sales before we can add such complexity.\n\n",
            "nb": "in case the file is a README file, the price applies to all files in this folder, recursively, PER FILE.",
            "type": "number"
          }
        },
        {
          "name": "isDraft",
          "required": false,
          "schema": {
            "fullComment": "If true, will not show up in markdownReader ui's",
            "type": "boolean"
          }
        },
        {
          "name": "updatedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "createdAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "privacy",
          "required": true,
          "schema": {
            "enum": [
              "public",
              "private",
              "request"
            ],
            "fullComment": "TODO: implement auth layers, then look at this again",
            "todo": "implement auth layers, then look at this again",
            "type": "string"
          }
        },
        {
          "name": "language",
          "required": true,
          "schema": {
            "enum": [
              "english",
              "dutch",
              "nepali",
              "portuguese",
              "brazilian",
              "german",
              "french",
              "spanish",
              "italian",
              "norwegian",
              "swedish",
              "danish",
              "vietnamese",
              "indonesian",
              "southAfrican",
              "tokiPona",
              "hindi",
              "mandarin",
              "arabic",
              "bengali",
              "urdu",
              "japanese",
              "swahili"
            ],
            "fullComment": "Either filled in or detected\n\nall currently supported languages",
            "type": "string"
          }
        },
        {
          "name": "isLanguageCustom",
          "required": false,
          "schema": {
            "fullComment": "If true, will not auto-detect the language",
            "type": "boolean"
          }
        },
        {
          "name": "deletedAt",
          "required": true,
          "schema": {
            "fullComment": "Time\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "createdFirstAt",
          "required": true,
          "schema": {
            "fullComment": "in some cases, data can be created before it was created in our system. In this case, use CreatedFirstAt if this information is important.\n\nTime\n\nTime can be stored in various ways but in my experience it is, again, best to keep it simple and just have one way to store time. I can think about this for hours, but my intuition goes towards using the same format as Date.now() because it is a very small format and is easy to read.\n\nIt is the amount of ms since 1970.\n\nI could argue to store it in seconds since 1970 since there are few applications of doing ms, but maybe we do, and it's just 30% bigger. No problem.\n\nTherefore, let's store all time values in the format Date.now()",
            "type": "number"
          }
        },
        {
          "name": "operationName",
          "required": true,
          "schema": {
            "fullComment": "name of operation the model belongs to\n\n- calculated value (not stored in database)\n- can be `null` or an actual operationName that it was saved at\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "null"
          }
        },
        {
          "name": "projectRelativePath",
          "required": true,
          "schema": {
            "fullComment": "path to dbfile\n\n- calculated value (not stored in database)\n- relatively from the project (without slash at start)\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "operationRelativePath",
          "required": false,
          "schema": {
            "fullComment": "path to db file\n\n- relatively from the operation root folder (without slash at start)\n- calculated value (not stored in database)\n- can be `undefined` if the db file does not belong to an operation\n- can be `undefined` when you are creating an item, because then it can be set for you",
            "type": "string"
          }
        },
        {
          "name": "id",
          "required": true,
          "schema": {
            "fullComment": "Should be an unique string By default, you can use `generateId()` to generate a random string of 16 characters. If you wish, you can also use any other string, as long as you are sure it's unique.\n\n# Background Info\n\nazAZ09 characters are easy to copy and provide 62 characters. the goal of an id is to be unique.\n\nthe advantage of a random id compared to an numeric id starting with 1 with auto increment is that you can set them up decentralised.\n\nthe change of duplicate ids gets bigger once you make them shorter the change of finding an existing id gets bigger once you make them shorter\n\nAn Id with 12 characters would provide 3.22e21 combinations.\n\nWhat is the change of duplicate ids? This depends on the amount of identifyable items in the data What is the change of guessing an id? This depends on speed of a brute force attack and the amount of available datapoints. If you can guess 10000 times per second, you can make 864.000.000 guesses. A billion guesses on a dataset of a billion datapoints yields 3226 correct ids on average.\n\nWhy make an id short? I don't know if there's an important reason.\n\nAll in all, I think we should make ids 24 characters by default. This would make it very easy to store, yet, with more than E42 combinations, make it nearly impossible to get duplication or brute force hits.\n\nAn id would look like this:\n\n``` { \"id\": \"sk2EcW9AkZpksk2EcW9AkZpk\" } ```\n\nLooks good to me! Don't think about it and just keep it simple. We can always migrate later to a bigger amount, but I don't see good reason to keep it smaller than this.",
            "type": "string"
          }
        },
        {
          "name": "slug",
          "required": true,
          "schema": {
            "fullComment": "filename (slugified)",
            "type": "string"
          }
        }
      ],
      "type": "object"
    },
    "performance": [
      {
        "label": "upsertDevice",
        "durationMs": 1
      },
      {
        "label": "getTsFunction",
        "durationMs": 1
      },
      {
        "label": "auth",
        "durationMs": 0
      },
      {
        "label": "cacheLookup",
        "durationMs": 0
      },
      {
        "label": "inputValidation",
        "durationMs": 0
      },
      {
        "label": "function",
        "durationMs": 935
      }
    ],
    "id": "rgxsgwpuffnsakasmdadbpqi"
  },
  {
    "createdAt": 1669477248549,
    "updatedAt": 1669477248549,
    "deletedAt": 0,
    "createdFirstAt": 1669477248549,
    "functionName": "getMeWithContext",
    "tsFunctionId": "trtngknndtvxrcqlbcnvdtve",
    "inputParameters": [],
    "isExample": false,
    "isTest": false,
    "isResultFromCache": false,
    "output": {
      "authorizations": [],
      "device": {
        "createdAt": 1669476183501,
        "updatedAt": 1669476183501,
        "deletedAt": 0,
        "createdFirstAt": 1669476183501,
        "authToken": "nmaqskuzrybutebgafpntjsg",
        "authenticationMethods": [],
        "ip": "::1",
        "lastOnlineAt": 0,
        "lastSyncDatabaseAtObject": {},
        "name": "mac-os-safari-undefined-undefined-undefined-1-lzww",
        "origins": [
          "http://localhost:42001"
        ],
        "previousIps": [],
        "userAgent": {
          "ua": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15",
          "browser": {
            "name": "Safari",
            "version": "16.1",
            "major": "16"
          },
          "engine": {
            "name": "WebKit",
            "version": "605.1.15"
          },
          "os": {
            "name": "Mac OS",
            "version": "10.15.7"
          },
          "device": {},
          "cpu": {}
        },
        "userAgentString": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15",
        "hasPapi": false,
        "slug": "mac-os-safari-undefined-undefined-undefined-1-lzww",
        "id": "gdasihotjuagfzpcljvnhrgx",
        "operationName": null,
        "projectRelativePath": "/db/devices.json",
        "persons": []
      },
      "groups": []
    },
    "performance": [
      {
        "label": "upsertDevice",
        "durationMs": 5
      },
      {
        "label": "getTsFunction",
        "durationMs": 6
      },
      {
        "label": "auth",
        "durationMs": 0
      },
      {
        "label": "cacheLookup",
        "durationMs": 0
      },
      {
        "label": "inputValidation",
        "durationMs": 0
      },
      {
        "label": "function",
        "durationMs": 0
      }
    ],
    "id": "ztpzerfhvpouptpuulvxzzpv"
  },
  {
    "createdAt": 1669477248617,
    "updatedAt": 1669477248617,
    "deletedAt": 0,
    "createdFirstAt": 1669477248617,
    "functionName": "getPublicBundleConfig",
    "tsFunctionId": "koourpyqhnekbwoupcecifwu",
    "inputParameters": [],
    "isExample": false,
    "isTest": false,
    "isResultFromCache": false,
    "output": {
      "createdAt": 1667640180389,
      "updatedAt": 1667640180389,
      "deletedAt": 0,
      "createdFirstAt": 1667640180389,
      "name": "typerepo",
      "slug": "typerepo",
      "description": "The new way to dev",
      "isGitRepoPublic": true,
      "emoji": "🏰",
      "primaryColor": "#3679c5",
      "gitRepoUrl": "https://github.com/CodeFromAnywhere/typerepo",
      "id": "kskoqvkjdmei8vusdkwovopwksjs",
      "language": "en",
      "bundleMarkdownReaderConfig": {
        "customOperationNames": [
          "k-dev",
          "new-template",
          "generate-sdk-operations",
          "rebuild-operation",
          "markdown-reader-web",
          "db-web"
        ],
        "omitAppsMenu": true,
        "omitModulesMenu": true,
        "omitPackagesMenu": true,
        "showTodos": false,
        "docsInRoot": true,
        "omitDictionaryMenu": false
      },
      "operationName": null,
      "projectRelativePath": "/db/bundle-configs/typerepo.json",
      "categoryStackCalculated": []
    },
    "performance": [
      {
        "label": "upsertDevice",
        "durationMs": 8
      },
      {
        "label": "getTsFunction",
        "durationMs": 1
      },
      {
        "label": "auth",
        "durationMs": 0
      },
      {
        "label": "cacheLookup",
        "durationMs": 0
      },
      {
        "label": "inputValidation",
        "durationMs": 0
      },
      {
        "label": "function",
        "durationMs": 73
      }
    ],
    "id": "tsyuemwvwdvubcatorconbfw"
  },
  {
    "createdAt": 1669477248746,
    "updatedAt": 1669477248746,
    "deletedAt": 0,
    "createdFirstAt": 1669477248746,
    "functionName": "getAllAppOperations",
    "tsFunctionId": "pcvvcdqxazfsylbkmzbtjbgz",
    "inputParameters": [],
    "isExample": false,
    "isTest": false,
    "isResultFromCache": false,
    "output": [
      {
        "name": "function-server",
        "port": 42000,
        "description": "Server that exposes all typerepo api functions wrapped into easily accessible endpoints.\n",
        "isOnline": true
      },
      {
        "name": "search-web",
        "port": 42001,
        "description": "# 🔎 search\n\nSearch everywhere\n\nNB: This is an experimental part of typerepo!",
        "emoji": "🔎",
        "isOnline": true
      },
      {
        "name": "db-web",
        "port": 42002,
        "description": "# 🗄 database\n\nWraps `db-ui` to expose it on a next.js react website for in the browser.\n",
        "isOnline": false
      },
      {
        "name": "markdown-reader-web",
        "port": 42004,
        "description": "# 📚 markdown-reader-web\n",
        "emoji": "📚",
        "isOnline": false
      },
      {
        "name": "writer-web",
        "port": 42007,
        "description": "✍️ writer-web",
        "emoji": "✍️",
        "isOnline": false
      },
      {
        "name": "function-web",
        "port": 42011,
        "description": "# ⚡️ function-web\n\nNB: This is an experimental part of typerepo!",
        "emoji": "⚡",
        "isOnline": false
      },
      {
        "name": "todo-web",
        "port": 42014,
        "description": "# 👬 todo-web\n\nNB: This is an experimental part of typerepo!",
        "emoji": "👬",
        "isOnline": false
      },
      {
        "name": "codestorys-web",
        "port": 42016,
        "description": "# 🧙‍♂️ codestories-web\n\nNB: this is an experimental part of typerepo!",
        "emoji": "🧙‍♂️",
        "isOnline": true
      }
    ],
    "performance": [
      {
        "label": "upsertDevice",
        "durationMs": 4
      },
      {
        "label": "getTsFunction",
        "durationMs": 1
      },
      {
        "label": "auth",
        "durationMs": 0
      },
      {
        "label": "cacheLookup",
        "durationMs": 0
      },
      {
        "label": "inputValidation",
        "durationMs": 0
      },
      {
        "label": "function",
        "durationMs": 201
      }
    ],
    "id": "ouotizfptyfyvgtputislnvj"
  }
]